// Generated by CoffeeScript 1.3.3

/*
* NavigationState
*/


(function() {
  var NavigationState;

  window.NavigationState = NavigationState = (function() {

    function NavigationState(path) {
      this._setPath(path);
    }

    NavigationState.prototype._setPath = function(path) {
      if (path instanceof NavigationState === true) {
        path = path.getSegments();
      }
      if (Array.isArray(path)) {
        path = path.join('/');
      }
      if (path.charAt(0) !== '/') {
        path = '/' + path;
      }
      if (path.charAt(path.length - 1) !== '/') {
        path = path + '/';
      }
      path = path.replace(/\/+/g, '/');
      path = path.replace(/\s/g, '-');
      return this.path = path;
    };

    NavigationState.prototype.getPath = function() {
      return this.path;
    };

    NavigationState.prototype.getSegments = function() {
      var result;
      result = this.path.split('/');
      result.shift();
      result.pop();
      return result;
    };

    NavigationState.prototype.getSegment = function(index) {
      var segments;
      segments = this.getSegments();
      return segments[index];
    };

    NavigationState.prototype.getFirstSegment = function() {
      var segments;
      segments = this.getSegments();
      return segments[0];
    };

    NavigationState.prototype.getLastSegment = function() {
      var segments;
      segments = this.getSegments();
      return segments[segments.length - 1];
    };

    NavigationState.prototype.prepend = function(foreignState) {
      var foreignSegment, segments, _i, _len, _ref;
      if (foreignSegment instanceof NavigationState === false) {
        foreignState = new NavigationState(foreignState);
      }
      segments = this.getSegments();
      _ref = foreignState.getSegments().reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        foreignSegment = _ref[_i];
        segments.unshift(foreignSegment);
      }
      return this._setPath(segments);
    };

    NavigationState.prototype.append = function(foreignState) {
      var foreignSegment, segments, _i, _len, _ref;
      if (foreignSegment instanceof NavigationState === false) {
        foreignState = new NavigationState(foreignState);
      }
      segments = this.getSegments();
      _ref = foreignState.getSegments();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        foreignSegment = _ref[_i];
        segments.push(foreignSegment);
      }
      return this._setPath(segments);
    };

    NavigationState.prototype.contains = function(foreignState) {
      var foreignSegment, foreignSegments, i, segment, segments, _i, _len;
      if (foreignSegment instanceof NavigationState === false) {
        foreignState = new NavigationState(foreignState);
      }
      foreignSegments = foreignState.getSegments();
      segments = this.getSegments();
      if (foreignSegments.length > segments.length) {
        false;
      }
      for (i = _i = 0, _len = foreignSegments.length; _i < _len; i = ++_i) {
        foreignSegment = foreignSegments[i];
        segment = segments[i];
        if (segment !== foreignSegment && (segment !== '*' || foreignSegment !== '*')) {
          false;
        }
      }
      return true;
    };

    NavigationState.prototype.clone = function() {
      return new NavigationState(this.path);
    };

    return NavigationState;

  })();

}).call(this);
